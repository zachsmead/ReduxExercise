// In this reducer, the state argument is not application state,
// but rather only the state that this reducer is responsible for.

// In other words, the piece of state that this reducer makes available to the rest of the app,
// is also the only input that it receives, the only input it cares about.

// So for example, in reducers/index.js, the value for 'books:' is determined
// by booksReducer. The state that gets passed into booksReducer is only
// the state that was previously generated by booksReducer. So whenever an action occurs,
// the same state that these reducers generated before gets passed back into the reducers.

// All reducers that receive actions get 2 args: the current state, and an action.
// 'state = null' handles the case in which the user first boots up the app
// and no book is currently selected. Before the user has clicked any book,
// this reducer will execute its default behavior which is to return state. but
// before the user has clicked any book, state is undefined and the reducer
// will return 'undefined', which is not really allowed in Redux and will throw an
// error.

// So, to handle this initial case, we will set the default state to null,
// state = null.
// This is a piece of ES6 syntax that says if an argument comes in undefined,
// let's set it to null.

export default function(state = null, action) {
	switch(action.type) {
	case 'BOOK_SELECTED':
		return action.payload;
	}
	return state
}
